# Generated by Django 2.2.8 on 2019-12-12 14:31

from django.db import migrations, models
import django.db.models.deletion
import modelcluster.fields
import wagtail.core.fields


class Migration(migrations.Migration):

    dependencies = [
        ("wagtailcore", "0041_group_collection_permissions_verbose_name_plural"),
        ("meetup_scraper", "0002_create_homepage"),
    ]

    operations = [
        migrations.CreateModel(
            name="Category",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("meetup_id", models.BigIntegerField(unique=True)),
                ("name", models.CharField(blank=True, max_length=255, null=True)),
                ("shortname", models.CharField(blank=True, max_length=255, null=True)),
                ("sort_name", models.CharField(blank=True, max_length=255, null=True)),
            ],
        ),
        migrations.CreateModel(
            name="Photo",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("meetup_id", models.BigIntegerField(unique=True)),
                ("highres_link", models.URLField(blank=True, null=True)),
                ("photo_link", models.URLField(blank=True, null=True)),
                ("thumb_link", models.URLField(blank=True, null=True)),
                ("photo_type", models.CharField(blank=True, max_length=50, null=True)),
                ("base_url", models.URLField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name="SimplePage",
            fields=[
                (
                    "page_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="wagtailcore.Page",
                    ),
                ),
                ("body", wagtail.core.fields.RichTextField()),
            ],
            options={"abstract": False,},
            bases=("wagtailcore.page",),
        ),
        migrations.CreateModel(
            name="Topic",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("meetup_id", models.BigIntegerField(unique=True)),
                ("lang", models.CharField(max_length=255)),
                ("name", models.CharField(max_length=255)),
                ("urlkey", models.CharField(max_length=255, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name="Venue",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("meetup_id", models.IntegerField(unique=True)),
                ("address_1", models.CharField(blank=True, max_length=255, null=True)),
                ("address_2", models.CharField(blank=True, max_length=255, null=True)),
                ("address_3", models.CharField(blank=True, max_length=255, null=True)),
                ("city", models.CharField(blank=True, max_length=255, null=True)),
                ("country", models.CharField(blank=True, max_length=255, null=True)),
                (
                    "lat",
                    models.DecimalField(
                        blank=True, decimal_places=30, max_digits=40, null=True
                    ),
                ),
                (
                    "lon",
                    models.DecimalField(
                        blank=True, decimal_places=30, max_digits=40, null=True
                    ),
                ),
                (
                    "localized_country_name",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                ("name", models.CharField(blank=True, max_length=255, null=True)),
                ("phone", models.CharField(blank=True, max_length=255, null=True)),
                ("zip_code", models.CharField(blank=True, max_length=255, null=True)),
            ],
        ),
        migrations.CreateModel(
            name="MetaCategory",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("meetup_id", models.BigIntegerField(unique=True)),
                ("name", models.CharField(max_length=255)),
                ("shortname", models.CharField(max_length=255)),
                ("sort_name", models.CharField(max_length=255)),
                (
                    "categories",
                    models.ManyToManyField(
                        related_name="_metacategory_categories_+",
                        to="meetup_scraper.Category",
                    ),
                ),
                (
                    "photo",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="meetup_scraper.Photo",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Member",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("meetup_id", models.BigIntegerField(unique=True)),
                ("name", models.CharField(blank=True, max_length=255, null=True)),
                ("bio", models.TextField(blank=True, null=True)),
                (
                    "photo",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="meetup_scraper.Photo",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="GroupPage",
            fields=[
                (
                    "page_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="wagtailcore.Page",
                    ),
                ),
                ("meetup_id", models.BigIntegerField(unique=True)),
                ("city", models.CharField(blank=True, max_length=255, null=True)),
                ("city_link", models.URLField(blank=True, null=True)),
                ("country", models.CharField(blank=True, max_length=255, null=True)),
                ("created", models.DateTimeField()),
                ("description", models.TextField()),
                (
                    "fee_options_currencies_code",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                (
                    "fee_options_currencies_default",
                    models.BooleanField(blank=True, null=True),
                ),
                (
                    "fee_options_type",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                ("join_mode", models.CharField(blank=True, max_length=255, null=True)),
                ("lat", models.DecimalField(decimal_places=8, max_digits=10)),
                ("lon", models.DecimalField(decimal_places=8, max_digits=10)),
                ("link", models.URLField()),
                (
                    "localized_country_name",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                (
                    "localized_location",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                ("member_limit", models.IntegerField(blank=True, null=True)),
                ("members", models.IntegerField()),
                ("name", models.CharField(max_length=100)),
                ("nomination_acceptable", models.BooleanField(default=False)),
                ("short_link", models.URLField(blank=True, null=True)),
                ("state", models.CharField(blank=True, max_length=255, null=True)),
                ("status", models.CharField(max_length=100)),
                ("timezone", models.CharField(max_length=255)),
                (
                    "untranslated_city",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                ("urlname", models.CharField(max_length=255, unique=True)),
                ("visibility", models.CharField(max_length=255)),
                ("welcome_message", models.TextField(blank=True, null=True)),
                ("who", models.CharField(blank=True, max_length=255, null=True)),
                (
                    "category",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="meetup_scraper.Category",
                    ),
                ),
                (
                    "group_photo",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="group_photo",
                        to="meetup_scraper.Photo",
                    ),
                ),
                (
                    "key_photo",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="key_photo",
                        to="meetup_scraper.Photo",
                    ),
                ),
                (
                    "meta_category",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to="meetup_scraper.MetaCategory",
                    ),
                ),
                (
                    "organizer",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to="meetup_scraper.Member",
                    ),
                ),
                (
                    "topics",
                    models.ManyToManyField(
                        related_name="_grouppage_topics_+", to="meetup_scraper.Topic"
                    ),
                ),
            ],
            options={"abstract": False,},
            bases=("wagtailcore.page",),
        ),
        migrations.CreateModel(
            name="EventPage",
            fields=[
                (
                    "page_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="wagtailcore.Page",
                    ),
                ),
                ("meetup_id", models.CharField(max_length=255, unique=True)),
                ("attendance_count", models.IntegerField(blank=True, null=True)),
                ("attendance_sample", models.IntegerField(blank=True, null=True)),
                ("attendee_sample", models.IntegerField(blank=True, null=True)),
                ("created", models.DateTimeField(blank=True, null=True)),
                ("date_in_series_pattern", models.BooleanField(default=False)),
                ("description", models.TextField(blank=True, null=True)),
                ("duration", models.DurationField(blank=True, null=True)),
                (
                    "fee_accepts",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                ("fee_amount", models.FloatField(blank=True, null=True)),
                (
                    "fee_currency",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                ("fee_description", models.TextField(blank=True, null=True)),
                ("fee_label", models.CharField(blank=True, max_length=255, null=True)),
                ("how_to_find_us", models.TextField(blank=True, null=True)),
                ("name", models.CharField(max_length=100)),
                ("status", models.CharField(blank=True, max_length=100, null=True)),
                ("time", models.DateTimeField()),
                ("updated", models.DateTimeField(blank=True, null=True)),
                ("utc_offset", models.IntegerField(blank=True, null=True)),
                (
                    "venue_visibility",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                ("visibility", models.CharField(blank=True, max_length=255, null=True)),
                (
                    "venue",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to="meetup_scraper.Venue",
                    ),
                ),
            ],
            options={"abstract": False,},
            bases=("wagtailcore.page",),
        ),
        migrations.CreateModel(
            name="EventHost",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("host_count", models.IntegerField(blank=True, null=True)),
                ("intro", models.TextField(blank=True, null=True)),
                ("join_date", models.DateTimeField(blank=True, null=True)),
                ("name", models.CharField(blank=True, max_length=255, null=True)),
                (
                    "event_page",
                    modelcluster.fields.ParentalKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="event_hosts",
                        to="meetup_scraper.EventPage",
                    ),
                ),
                (
                    "member",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to="meetup_scraper.Member",
                    ),
                ),
                (
                    "photo",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to="meetup_scraper.Photo",
                    ),
                ),
            ],
        ),
    ]
